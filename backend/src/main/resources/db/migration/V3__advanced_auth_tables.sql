-- Oracle specific DDL for advanced auth
CREATE TABLE user_roles (
  user_id NUMBER(19) NOT NULL,
  role VARCHAR2(50) NOT NULL,
  CONSTRAINT fk_user_roles_user FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE INDEX idx_user_roles_user ON user_roles(user_id);

CREATE TABLE refresh_tokens (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  token VARCHAR2(128) NOT NULL UNIQUE,
  expiry TIMESTAMP NOT NULL,
  revoked NUMBER(1) DEFAULT 0 NOT NULL,
  CONSTRAINT fk_rt_user FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE INDEX idx_rt_user ON refresh_tokens(user_id);

CREATE TABLE email_verification_tokens (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  token VARCHAR2(100) NOT NULL UNIQUE,
  expiry TIMESTAMP NOT NULL,
  used NUMBER(1) DEFAULT 0 NOT NULL,
  CONSTRAINT fk_evt_user FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE INDEX idx_evt_user ON email_verification_tokens(user_id);

CREATE TABLE password_reset_tokens (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  token VARCHAR2(100) NOT NULL UNIQUE,
  expiry TIMESTAMP NOT NULL,
  used NUMBER(1) DEFAULT 0 NOT NULL,
  CONSTRAINT fk_prt_user FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE INDEX idx_prt_user ON password_reset_tokens(user_id);

CREATE TABLE login_attempts (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ip VARCHAR2(64) NOT NULL,
  ts TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  success NUMBER(1) NOT NULL
);
CREATE INDEX idx_la_ip ON login_attempts(ip);

-- Seed admin user placeholder (password to be updated manually)
INSERT INTO users (username,password,email,currency,locale) VALUES ('admin','CHANGE_ME','$admin@example.com','USD','en-US');
-- assign role after user created
INSERT INTO user_roles (user_id, role) SELECT id,'ADMIN' FROM users WHERE username='admin';