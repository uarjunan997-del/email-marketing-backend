-- Flyway migration V31: Contact management core tables
-- NOTE: Adjust tablespaces/identity/JSON column types for your Oracle version if needed.

-- CONTACTS table: stores canonical contacts per user. custom fields stored as JSON in CLOB or BLOB.
CREATE TABLE contacts (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL,
  email VARCHAR2(320) NOT NULL,
  first_name VARCHAR2(200),
  last_name VARCHAR2(200),
  phone VARCHAR2(50),
  country VARCHAR2(100),
  city VARCHAR2(150),
  segment VARCHAR2(200),
  unsubscribed NUMBER(1) DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  custom_fields CLOB,
  is_deleted NUMBER(1) DEFAULT 0,
  delete_requested_at TIMESTAMP WITH TIME ZONE
);

-- Unique constraint per user on email
CREATE UNIQUE INDEX uq_contacts_user_email ON contacts(user_id, LOWER(email));

-- CONTACT_LISTS: saved lists / dynamic segments
CREATE TABLE contact_lists (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL,
  name VARCHAR2(255) NOT NULL,
  description VARCHAR2(2000),
  is_dynamic NUMBER(1) DEFAULT 0,
  dynamic_query CLOB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- CONTACT_LIST_MEMBERS: materialized membership table when needed
CREATE TABLE contact_list_members (
  list_id NUMBER NOT NULL,
  contact_id NUMBER NOT NULL,
  added_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (list_id, contact_id)
);

-- CONTACT_ACTIVITIES: event timeline for contact engagement
CREATE TABLE contact_activities (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  contact_id NUMBER NOT NULL,
  user_id NUMBER NOT NULL,
  type VARCHAR2(100) NOT NULL,
  metadata CLOB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- CONTACT_SCORES: cached engagement score per contact
CREATE TABLE contact_scores (
  contact_id NUMBER PRIMARY KEY,
  user_id NUMBER NOT NULL,
  score NUMBER DEFAULT 0,
  last_calculated_at TIMESTAMP WITH TIME ZONE
);

-- CONTACT_CUSTOM_FIELDS: metadata for dynamic fields
CREATE TABLE contact_custom_fields (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL,
  field_key VARCHAR2(200) NOT NULL,
  label VARCHAR2(255),
  data_type VARCHAR2(50),
  schema_json CLOB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- IMPORT_JOBS: track bulk import operations
CREATE TABLE import_jobs (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL,
  filename VARCHAR2(1000),
  source VARCHAR2(50),
  total_rows NUMBER,
  processed_rows NUMBER DEFAULT 0,
  failed_rows NUMBER DEFAULT 0,
  status VARCHAR2(50) DEFAULT 'PENDING',
  dedupe_strategy VARCHAR2(50),
  mapping CLOB,
  errors CLOB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- SUPPRESSION LIST
CREATE TABLE suppression_list (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL,
  email VARCHAR2(320) NOT NULL,
  reason VARCHAR2(4000),
  added_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- Indexes to speed common queries
CREATE INDEX idx_contacts_user ON contacts(user_id);
CREATE INDEX idx_contacts_email_lower ON contacts(LOWER(email));
CREATE INDEX idx_contacts_segment ON contacts(segment);
CREATE INDEX idx_activities_contact ON contact_activities(contact_id);
CREATE INDEX idx_activities_user ON contact_activities(user_id);
CREATE INDEX idx_import_jobs_user ON import_jobs(user_id);
CREATE INDEX idx_suppression_user_email ON suppression_list(user_id, LOWER(email));

-- Oracle Text index for full-text search across name/email/segment
-- Requires CTXSYS.CONTEXT; if not installed, this DDL will fail and should be created by DBA
BEGIN
  EXECUTE IMMEDIATE 'CREATE INDEX idx_contacts_text ON contacts (first_name || '' '' || last_name || '' '' || NVL(email,'''') || '' '' || NVL(segment,'''') ) INDEXTYPE IS CTXSYS.CONTEXT';
EXCEPTION WHEN OTHERS THEN
  NULL; -- ignore if it fails in environments without CTX
END;

-- Add foreign key constraints for basic integrity (optional: add cascade rules as needed)
-- Note: adding FKs late to avoid lock issues during big imports; DBAs may prefer to add constraints after bulk loads
ALTER TABLE contact_list_members ADD CONSTRAINT fk_clm_list FOREIGN KEY (list_id) REFERENCES contact_lists(id);
ALTER TABLE contact_list_members ADD CONSTRAINT fk_clm_contact FOREIGN KEY (contact_id) REFERENCES contacts(id);
ALTER TABLE contact_activities ADD CONSTRAINT fk_act_contact FOREIGN KEY (contact_id) REFERENCES contacts(id);
ALTER TABLE contact_activities ADD CONSTRAINT fk_act_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE contact_scores ADD CONSTRAINT fk_scores_contact FOREIGN KEY (contact_id) REFERENCES contacts(id);
ALTER TABLE contact_scores ADD CONSTRAINT fk_scores_user FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE suppression_list ADD CONSTRAINT fk_supp_user FOREIGN KEY (user_id) REFERENCES users(id);
