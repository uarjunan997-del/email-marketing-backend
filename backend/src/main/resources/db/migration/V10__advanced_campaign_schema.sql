-- Idempotent creation wrappers to avoid ORA-00955 / ORA-01430 on re-run

DECLARE e_exists EXCEPTION; PRAGMA EXCEPTION_INIT(e_exists, -955); BEGIN
    BEGIN EXECUTE IMMEDIATE 'CREATE TABLE campaign_schedules (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, campaign_id NUMBER NOT NULL, timezone VARCHAR2(64) NOT NULL, scheduled_time TIMESTAMP NOT NULL, send_window_start TIMESTAMP, send_window_end TIMESTAMP, optimization_strategy VARCHAR2(32), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CONSTRAINT fk_sched_campaign FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_campaign_schedule_campaign ON campaign_schedules(campaign_id)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE TABLE campaign_recipients (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, campaign_id NUMBER NOT NULL, contact_id NUMBER, email VARCHAR2(256) NOT NULL, status VARCHAR2(24) DEFAULT ''PENDING'' NOT NULL, last_attempt_at TIMESTAMP, attempt NUMBER DEFAULT 0 NOT NULL, failure_reason VARCHAR2(4000), engagement_score NUMBER, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CONSTRAINT fk_rec_campaign FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_campaign_rec_campaign ON campaign_recipients(campaign_id)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_campaign_rec_status ON campaign_recipients(status)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE TABLE campaign_ab_tests (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, campaign_id NUMBER NOT NULL, variant_code VARCHAR2(8) NOT NULL, subject_line VARCHAR2(255), template_id NUMBER, send_split_percent NUMBER, sent_count NUMBER DEFAULT 0, open_count NUMBER DEFAULT 0, click_count NUMBER DEFAULT 0, winner NUMBER(1), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CONSTRAINT fk_ab_campaign FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_campaign_ab_campaign ON campaign_ab_tests(campaign_id)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE TABLE campaign_approvals (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, campaign_id NUMBER NOT NULL, approver_user_id NUMBER NOT NULL, status VARCHAR2(24) DEFAULT ''PENDING'' NOT NULL, decision_at TIMESTAMP, notes VARCHAR2(1000), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CONSTRAINT fk_approval_campaign FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE, CONSTRAINT fk_approval_user FOREIGN KEY (approver_user_id) REFERENCES users(id))'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_campaign_approvals_campaign ON campaign_approvals(campaign_id)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE TABLE sending_queue (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, campaign_id NUMBER NOT NULL, user_id NUMBER NOT NULL, recipient VARCHAR2(256) NOT NULL, subject VARCHAR2(255), body CLOB, priority NUMBER DEFAULT 5 NOT NULL, status VARCHAR2(24) DEFAULT ''PENDING'' NOT NULL, attempt NUMBER DEFAULT 0 NOT NULL, max_attempts NUMBER DEFAULT 3 NOT NULL, next_attempt_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, last_error VARCHAR2(1000), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, CONSTRAINT fk_sendq_campaign FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE, CONSTRAINT fk_sendq_user FOREIGN KEY (user_id) REFERENCES users(id))'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_sendq_status_priority ON sending_queue(status, priority)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_sendq_campaign ON sending_queue(campaign_id)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE TABLE campaign_roi (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, campaign_id NUMBER NOT NULL, revenue_amount NUMBER, currency VARCHAR2(8) DEFAULT ''USD'', attributed_orders NUMBER, last_calculated_at TIMESTAMP, CONSTRAINT fk_roi_campaign FOREIGN KEY (campaign_id) REFERENCES campaigns(id) ON DELETE CASCADE)'; EXCEPTION WHEN e_exists THEN NULL; END;
    BEGIN EXECUTE IMMEDIATE 'CREATE INDEX idx_campaign_roi_campaign ON campaign_roi(campaign_id)'; EXCEPTION WHEN e_exists THEN NULL; END;
END;
/

-- Conditional column adds
DECLARE col_exists NUMBER; BEGIN
    SELECT COUNT(*) INTO col_exists FROM user_tab_cols WHERE table_name='CAMPAIGNS' AND column_name='SUBJECT'; IF col_exists=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE campaigns ADD (subject VARCHAR2(255))'; END IF;
    SELECT COUNT(*) INTO col_exists FROM user_tab_cols WHERE table_name='CAMPAIGNS' AND column_name='PREHEADER'; IF col_exists=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE campaigns ADD (preheader VARCHAR2(255))'; END IF;
    SELECT COUNT(*) INTO col_exists FROM user_tab_cols WHERE table_name='CAMPAIGNS' AND column_name='APPROVAL_STATUS'; IF col_exists=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE campaigns ADD (approval_status VARCHAR2(24) DEFAULT ''NOT_REQUIRED'')'; END IF;
    SELECT COUNT(*) INTO col_exists FROM user_tab_cols WHERE table_name='CAMPAIGNS' AND column_name='REVIEW_REQUESTED_AT'; IF col_exists=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE campaigns ADD (review_requested_at TIMESTAMP)'; END IF;
    SELECT COUNT(*) INTO col_exists FROM user_tab_cols WHERE table_name='CAMPAIGNS' AND column_name='APPROVED_AT'; IF col_exists=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE campaigns ADD (approved_at TIMESTAMP)'; END IF;
    SELECT COUNT(*) INTO col_exists FROM user_tab_cols WHERE table_name='CAMPAIGNS' AND column_name='ANALYZED_AT'; IF col_exists=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE campaigns ADD (analyzed_at TIMESTAMP)'; END IF;
    SELECT COUNT(*) INTO col_exists FROM user_tab_cols WHERE table_name='CAMPAIGNS' AND column_name='METADATA_JSON'; IF col_exists=0 THEN EXECUTE IMMEDIATE 'ALTER TABLE campaigns ADD (metadata_json CLOB)'; END IF;
END;
/
