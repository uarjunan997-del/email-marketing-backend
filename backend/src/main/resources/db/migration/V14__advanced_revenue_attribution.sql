-- Advanced Revenue Attribution Schema (Oracle)
-- 1. Email interactions (enriched events for attribution & multi-channel)
CREATE TABLE email_interactions (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  campaign_id NUMBER(19) NOT NULL,
  contact_id NUMBER(19),
  email VARCHAR2(320),
  channel VARCHAR2(32) DEFAULT 'EMAIL' NOT NULL, -- EMAIL, PAID_ADS, SOCIAL, etc.
  event_type VARCHAR2(16) NOT NULL, -- CLICK, OPEN
  event_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  variant_code VARCHAR2(32),
  utm_source VARCHAR2(64),
  utm_medium VARCHAR2(64),
  utm_campaign VARCHAR2(128),
  user_agent VARCHAR2(256),
  ip_address VARCHAR2(64)
);
CREATE INDEX idx_interact_user_time ON email_interactions(user_id, event_time);
CREATE INDEX idx_interact_campaign_time ON email_interactions(campaign_id, event_time);
CREATE INDEX idx_interact_email_time ON email_interactions(email, event_time);

-- Optional partitioning (manual apply in production):
-- ALTER TABLE email_interactions PARTITION BY RANGE (event_time) INTERVAL (NUMTOYMINTERVAL(1,'MONTH')) (PARTITION p0 VALUES LESS THAN (TO_DATE('2025-01-01','YYYY-MM-DD')));

-- 2. Attribution models configuration
CREATE TABLE attribution_models (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  model_code VARCHAR2(32) UNIQUE NOT NULL, -- LAST_TOUCH, FIRST_TOUCH, LINEAR, TIME_DECAY
  description VARCHAR2(256),
  decay_half_life_days NUMBER(5,2),
  active_flag CHAR(1) DEFAULT 'Y'
);
INSERT INTO attribution_models(model_code, description, decay_half_life_days) VALUES ('LAST_TOUCH','Last qualifying interaction', NULL);
INSERT INTO attribution_models(model_code, description, decay_half_life_days) VALUES ('FIRST_TOUCH','First qualifying interaction', NULL);
INSERT INTO attribution_models(model_code, description, decay_half_life_days) VALUES ('LINEAR','All qualifying interactions share equally', NULL);
INSERT INTO attribution_models(model_code, description, decay_half_life_days) VALUES ('TIME_DECAY','Recent interactions weigh more', 7);
COMMIT;

-- 3. Revenue attribution table
CREATE TABLE revenue_attribution (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  order_id NUMBER(19) NOT NULL,
  campaign_id NUMBER(19) NOT NULL,
  model_code VARCHAR2(32) NOT NULL,
  interaction_id NUMBER(19),
  channel VARCHAR2(32) NOT NULL,
  weight NUMBER(8,6) NOT NULL,
  attributed_amount NUMBER(18,4) NOT NULL,
  currency VARCHAR2(8) DEFAULT 'USD' NOT NULL,
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
CREATE INDEX idx_rev_attr_order ON revenue_attribution(order_id);
CREATE INDEX idx_rev_attr_campaign ON revenue_attribution(campaign_id);
CREATE INDEX idx_rev_attr_user_model ON revenue_attribution(user_id, model_code);
ALTER TABLE revenue_attribution ADD CONSTRAINT fk_rev_attr_order FOREIGN KEY(order_id) REFERENCES ecommerce_orders(id);

-- 4. Fraud flagging auxiliary table
CREATE TABLE attribution_fraud_flags (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  order_id NUMBER(19),
  reason_code VARCHAR2(64) NOT NULL,
  details CLOB,
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
CREATE INDEX idx_fraud_user_order ON attribution_fraud_flags(user_id, order_id);

-- 5. Materialized view for campaign revenue summary (per model)
CREATE MATERIALIZED VIEW mv_campaign_revenue_summary
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
AS
SELECT user_id, campaign_id, model_code,
       SUM(attributed_amount) AS total_revenue,
       COUNT(DISTINCT order_id) AS order_count
FROM revenue_attribution
GROUP BY user_id, campaign_id, model_code;
CREATE INDEX idx_mv_rev_summary_user ON mv_campaign_revenue_summary(user_id, campaign_id);
