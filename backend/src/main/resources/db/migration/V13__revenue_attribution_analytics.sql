-- Revenue attribution & advanced analytics schema (Oracle)
-- 1. Ecommerce orders (from Shopify/WooCommerce webhooks)
CREATE TABLE ecommerce_orders (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  external_order_id VARCHAR2(128) NOT NULL,
  currency VARCHAR2(8) DEFAULT 'USD' NOT NULL,
  total_amount NUMBER(18,4) NOT NULL,
  subtotal_amount NUMBER(18,4),
  tax_amount NUMBER(18,4),
  shipping_amount NUMBER(18,4),
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  customer_email VARCHAR2(320),
  JSON_PAYLOAD CLOB
);
CREATE UNIQUE INDEX ux_orders_user_external ON ecommerce_orders(user_id, external_order_id);
CREATE INDEX idx_orders_user_created ON ecommerce_orders(user_id, created_at);

-- 2. Attribution mapping between orders and campaigns (multi-touch placeholder; currently last-click/open within 30d)
CREATE TABLE campaign_order_attribution (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  campaign_id NUMBER(19) NOT NULL,
  order_id NUMBER(19) NOT NULL,
  attribution_type VARCHAR2(32) NOT NULL, -- LAST_OPEN, LAST_CLICK, FIRST_CLICK etc.
  weight NUMBER(5,4) DEFAULT 1.0 NOT NULL,
  attributed_amount NUMBER(18,4) NOT NULL,
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
CREATE INDEX idx_attr_user_campaign ON campaign_order_attribution(user_id, campaign_id);
CREATE INDEX idx_attr_campaign ON campaign_order_attribution(campaign_id);
ALTER TABLE campaign_order_attribution ADD CONSTRAINT fk_attr_order FOREIGN KEY(order_id) REFERENCES ecommerce_orders(id);

-- 3. Industry benchmarks static table
CREATE TABLE industry_benchmarks (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vertical VARCHAR2(64) NOT NULL,
  list_tier VARCHAR2(32) NOT NULL, -- TIER1:<5K, TIER2:5-20K, TIER3:20-100K, TIER4:100K+
  avg_open_rate NUMBER(6,4) NOT NULL,
  avg_click_rate NUMBER(6,4) NOT NULL,
  avg_ctr NUMBER(6,4) NOT NULL,
  avg_roy_per_email NUMBER(12,6),
  updated_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
CREATE UNIQUE INDEX ux_bench_vertical_tier ON industry_benchmarks(vertical, list_tier);

-- 4. Variant performance snapshot table (denormalized for faster queries)
CREATE TABLE campaign_variant_stats (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  campaign_id NUMBER(19) NOT NULL,
  variant_code VARCHAR2(32) NOT NULL,
  sent_count NUMBER(12) DEFAULT 0,
  open_count NUMBER(12) DEFAULT 0,
  click_count NUMBER(12) DEFAULT 0,
  bounce_count NUMBER(12) DEFAULT 0,
  revenue_amount NUMBER(18,4),
  orders_count NUMBER(12),
  last_calculated_at TIMESTAMP,
  UNIQUE (campaign_id, variant_code)
);
CREATE INDEX idx_variant_campaign ON campaign_variant_stats(campaign_id);

-- 5. Currency rates (daily)
CREATE TABLE currency_rates (
  rate_date DATE NOT NULL,
  base_currency VARCHAR2(8) NOT NULL,
  counter_currency VARCHAR2(8) NOT NULL,
  rate NUMBER(18,8) NOT NULL,
  PRIMARY KEY (rate_date, base_currency, counter_currency)
);

-- 6. Cost per email plan-based overrides (optional custom overrides per user)
CREATE TABLE email_cost_overrides (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER(19) NOT NULL,
  effective_date DATE DEFAULT TRUNC(SYSDATE) NOT NULL,
  cost_per_email NUMBER(10,6) NOT NULL,
  currency VARCHAR2(8) DEFAULT 'USD' NOT NULL
);
CREATE INDEX idx_cost_user_date ON email_cost_overrides(user_id, effective_date);

-- 7. Hourly materialized view for recent (rolling 30d) events (FAST refresh candidate)
CREATE MATERIALIZED VIEW mv_email_events_hourly
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
AS
SELECT user_id,
       campaign_id,
       TO_CHAR(event_time, 'YYYY-MM-DD"T"HH24') AS hour_bucket,
       MIN(TRUNC(event_time,'HH')) AS bucket_start,
       SUM(CASE WHEN event_type='SENT' THEN 1 ELSE 0 END) AS sent_count,
       SUM(CASE WHEN event_type='OPEN' THEN 1 ELSE 0 END) AS open_count,
       SUM(CASE WHEN event_type='CLICK' THEN 1 ELSE 0 END) AS click_count,
       SUM(CASE WHEN event_type='BOUNCE' THEN 1 ELSE 0 END) AS bounce_count
FROM email_events
WHERE event_time >= (SYSTIMESTAMP - NUMTODSINTERVAL(30,'DAY'))
GROUP BY user_id, campaign_id, TO_CHAR(event_time, 'YYYY-MM-DD"T"HH24');
CREATE INDEX idx_mv_ev_hourly_user_hour ON mv_email_events_hourly(user_id, hour_bucket);

-- Seed minimal benchmark data (sample few verticals; extend via data load process)
INSERT INTO industry_benchmarks(vertical, list_tier, avg_open_rate, avg_click_rate, avg_ctr, avg_roy_per_email) VALUES ('RETAIL','TIER1',0.245,0.032,0.032,0.0123);
INSERT INTO industry_benchmarks(vertical, list_tier, avg_open_rate, avg_click_rate, avg_ctr, avg_roy_per_email) VALUES ('SAAS','TIER1',0.285,0.041,0.041,0.0189);
INSERT INTO industry_benchmarks(vertical, list_tier, avg_open_rate, avg_click_rate, avg_ctr, avg_roy_per_email) VALUES ('EDU','TIER1',0.301,0.027,0.027,0.0098);
COMMIT;

-- Index tuning suggestions (not auto-applied) for very high scale:
-- CREATE INDEX idx_orders_email_created ON ecommerce_orders(customer_email, created_at);
-- CREATE INDEX idx_attr_order_id ON campaign_order_attribution(order_id);
-- Partitioning (manual): ALTER TABLE ecommerce_orders PARTITION BY RANGE (created_at) INTERVAL (NUMTOYMINTERVAL(1,'MONTH')) (PARTITION p0 VALUES LESS THAN (TO_DATE('2025-01-01','YYYY-MM-DD')));